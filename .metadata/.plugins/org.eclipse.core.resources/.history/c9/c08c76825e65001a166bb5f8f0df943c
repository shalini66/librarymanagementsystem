package com.capgemini.librarymanagementsystemjdbc.dao;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.LinkedList;
import java.util.Properties;

import com.capgemini.librarymanagementsystemjdbc.dto.BookBean;
import com.capgemini.librarymanagementsystemjdbc.dto.UsersBean;
import com.capgemini.librarymanagementsystemjdbc.exception.AdminException;
import com.capgemini.librarymanagementsystemjdbc.factory.AdminFactory;
import com.capgemini.librarymanagementsystemjdbc.factory.StudentFactory;
import com.capgemini.librarymanagementsystemjdbc.service.AdminService;
import com.capgemini.librarymanagementsystemjdbc.service.StudentService;
import com.capgemini.librarymanagementsystemjdbc.service.StudentServiceImp;
import com.mysql.jdbc.Driver;

public class UsersDAOImp implements UsersDAO {

	@Override
	public boolean register(UsersBean info) {
		try (FileInputStream fin = new FileInputStream("dburl.properties")) {

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName("com.mysql.jdbc.Driver");
			String dburl = "jdbc:mysql://localhost:3306/library_management_system";
			try (Connection conn = DriverManager.getConnection(dburl, "root", "root")) {
				String query = "insert into users values(?,?,?,?,?,?)";
				try (PreparedStatement pstmt = conn.prepareStatement(query);) {
					pstmt.setInt(1, info.getId());
					pstmt.setString(2, info.getName());
					pstmt.setLong(3, info.getMobile());
					pstmt.setString(4, info.getEmail());
					pstmt.setString(5, info.getPassword());
					pstmt.setString(6, info.getRole());
					int count = pstmt.executeUpdate();
					if (count > 0) {
						System.out.print("Student added successfully");
					} else {
						System.out.print("Unable to add Student!");
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public String auth(String email, String password) {

		try (FileInputStream fin = new FileInputStream("dburl.properties")) {
			Properties pro = new Properties();
			pro.load(fin);

			Class.forName(pro.getProperty("path")).newInstance();
			try (Connection conn = DriverManager.getConnection(pro.getProperty("dburl"), pro)) {
				String query = pro.getProperty("auth");
				try (PreparedStatement pstmt = conn.prepareStatement(query)) {
					pstmt.setString(1, email);
					pstmt.setString(2, password);

					ResultSet rs = pstmt.executeQuery();
					while(rs.next()) {
						String role =  rs.getString("role");
						if(role.equals("admin")) {
							BookBean book = null;
							addBook(book);
							int bookType = 0;
							searchBookType(bookType);
							String bname = null;
							searchBookTitle(bname);
							String bAuthor = null;
							searchBookAuthor(bAuthor);
						} else if(role.equals("student")) {
							
						}
					}
					/*
					 * for(UsersBean bean : list) {
					 * 
					 * if(bean.getEmail().equals(email)&&bean.getPassword().equals(password)) {
					 * return rs.getString("role"); }
					 * 
					 * if(rs.getString("email").equals(email)&&rs.getString("password").equals(
					 * password)) { return rs.getString("role"); } } throw new
					 * AdminException("invalid email and password");
					 */
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	static boolean addBook(BookBean book) {
			try(FileInputStream	fin = new FileInputStream("dburl.properties")){

				Properties pro = new Properties();
				pro.load(fin);

				Class.forName(pro.getProperty("path")).newInstance();
				try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"), pro)){
					String query = pro.getProperty("add_book");
					try(PreparedStatement pstmt = conn.prepareStatement(query)){
						pstmt.setString(1, book.getBname());
						pstmt.setInt(2, book.getBid());
						pstmt.setString(3, book.getAuthor());
						pstmt.setString(4, book.getCategory());
						pstmt.setString(5, book.getPublishername());
						int count = pstmt.executeUpdate();
					}
				}

			}catch(Exception e) {
				e.printStackTrace();
			}
			return false;

		}
		
		static BookBean searchBookTitle(String bname) {
			BookBean bean = new BookBean();
			try(FileInputStream	fin = new FileInputStream("dburl.properties")){

				Properties pro = new Properties();
				pro.load(fin);

				Class.forName(pro.getProperty("path")).newInstance();
				try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"), pro)){
					String query = pro.getProperty("search_book_name");
					try(PreparedStatement pstmt = conn.prepareStatement(query)){
						pstmt.setString(1, bname);
						ResultSet rs = pstmt.executeQuery();
						if(rs.next()) {	
							bean.setBid(rs.getInt("bid"));
							bean.setBname(rs.getString("bname"));
							bean.setAuthor(rs.getString("author"));
							bean.setCategory(rs.getString("category"));
							bean.setPublishername(rs.getString("publishername"));
							
						} else {
							System.out.println("book not found");
						}
					}
				}

			}catch(Exception e) {
				e.printStackTrace();
			}
			return bean;
			
		}

		
		static BookBean searchBookAuthor(String bAuthor) {
			BookBean bean = new BookBean();
			try(FileInputStream	fin = new FileInputStream("dburl.properties")){

				Properties pro = new Properties();
				pro.load(fin);

				Class.forName(pro.getProperty("path")).newInstance();
				try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"), pro)){
					String query = pro.getProperty("search_book_author");
					try(PreparedStatement pstmt = conn.prepareStatement(query)){
						pstmt.setString(1, bAuthor);
						ResultSet rs = pstmt.executeQuery();
						if(rs.next()) {	
							bean.setBid(rs.getInt("bid"));
							bean.setBname(rs.getString("bname"));
							bean.setAuthor(rs.getString("author"));
							bean.setCategory(rs.getString("category"));
							bean.setPublishername(rs.getString("publishername"));
							
						} else {
							System.out.println("book not found");
						}
					}
				}

			}catch(Exception e) {
				e.printStackTrace();
			}
			return bean;
			
		}

		
		static BookBean searchBookType(int bookType) {
			BookBean bean = new BookBean();
			try(FileInputStream	fin = new FileInputStream("dburl.properties")){

				Properties pro = new Properties();
				pro.load(fin);

				Class.forName(pro.getProperty("path")).newInstance();
				try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"), pro)){
					String query = pro.getProperty("search_book_id");
					try(PreparedStatement pstmt = conn.prepareStatement(query)){
						pstmt.setInt(1, bookType);
						ResultSet rs = pstmt.executeQuery();
						if(rs.next()) {	
							bean.setBid(rs.getInt("bid"));
							bean.setBname(rs.getString("bname"));
							bean.setAuthor(rs.getString("author"));
							bean.setCategory(rs.getString("category"));
							bean.setPublishername(rs.getString("publishername"));
						
						} else {
							System.out.println("book not found");
						}
					}
				}

			}catch(Exception e) {
				e.printStackTrace();
			}
			return bean;
			
		}

		
		static boolean updateBook(BookBean bean) {

			try(FileInputStream fin = new FileInputStream("dburl.properties")){

				Properties pro = new Properties(); pro.load(fin);

				//Class.forName(pro.getProperty("path")).newInstance();
				Class.forName("com.mysql.jdbc.Driver").newInstance(); String dburl=
						"jdbc:mysql://localhost:3306/library_management_system?user=root&password=root";
				try(Connection conn = DriverManager.getConnection(dburl)){
					/* String query ="update book set bname='chemistry' where bname=?"; */ 
					String query ="update book set bname=? where bname=?";
					try(PreparedStatement pstmt = conn.prepareStatement(query)){ 
						pstmt.setString(1, bean.getBname());
						pstmt.setString(2, bean.getBname());
						int rs = pstmt.executeUpdate();	
						
					}
				}
			} catch(Exception e) {
				e.printStackTrace();
			}
			return false;

		}
}
