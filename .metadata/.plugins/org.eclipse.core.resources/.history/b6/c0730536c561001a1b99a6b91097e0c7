package com.capgemini.librarymanagement.dao;

import java.util.LinkedList;
import java.util.List;

import com.capgemini.librarymanagement.database.DataBase;
import com.capgemini.librarymanagement.dto.BookBean;
import com.capgemini.librarymanagement.dto.StudentBean;
import com.capgemini.librarymanagement.exception.AdminException;
import com.capgemini.librarymanagement.exception.BookException;
import com.capgemini.librarymanagement.exception.StudentException;

public class StudentDAOImp implements StudentDAO {

	public boolean register(StudentBean info) {
		for(StudentBean studentBean : DataBase.student) {
			if(studentBean.getEmail().equals(info.getEmail())) {
				return false;
			}
		}
		DataBase.student.add(info);
		return true;
	}

	public StudentBean auth(String email, String password) {
		for(StudentBean bean : DataBase.student) {
			if(bean.getEmail().equals(email)&& bean.getPassword().equals(password)) {
				System.out.println("Login Successful");
				return bean;
			} 
		}
		throw new StudentException("Invalid email and password");
		
	}
	public LinkedList<BookBean> searchBookTitle(String bname) {
		LinkedList<BookBean> searchList=new LinkedList<BookBean>();
		for(int i=0;i<=DataBase.book.size()-1;i++)
		{
			BookBean retrievedBook=DataBase.book.get(i);
			String retrievedBname=retrievedBook.getName();
			if(bname.equals(retrievedBname))
			{
				searchList.add(retrievedBook);	
				return searchList;
				
				
			}
		}
		if(searchList.size()==0)
		{
			throw new StudentException ("Book is not found");
		}
		else
		{
			return searchList;
		}
	}


	public LinkedList<BookBean> searchBookAuthor(String bAuthor) {
		LinkedList<BookBean> searchList=new LinkedList<BookBean>();
		for(int i=0;i<=DataBase.book.size()-1;i++)
		{
			BookBean retrievedBook=DataBase.book.get(i);
			String retrievedBAuthor=retrievedBook.getAuthor();
			if(bAuthor.equals(retrievedBAuthor))
			{
				searchList.add(retrievedBook);	
			}
		}
		if(searchList.size()==0)
		{
			throw new StudentException ("Book is not found");
		}
		else
		{
			return searchList;
		}	
	}


	public LinkedList<BookBean> searchBookType(int bookType) {
		LinkedList<BookBean> searchList=new LinkedList<BookBean>();
		for(int i=0;i<=DataBase.book.size()-1;i++)
		{
			BookBean retrievedBook=DataBase.book.get(i);
			String retrievedBookType=retrievedBook.getCategory();
			if(bookType.equals(retrievedBookType))
			{
				searchList.add(retrievedBook);	
			}
		}
		if(searchList.size()==0)
		{
			throw new AdminException("Book not found");
		}
		else
		{
			return searchList;
		}	
	}


	public LinkedList<Integer> getBookIds() {
		LinkedList<Integer> idList=new LinkedList<Integer>();
		for(int i=0;i<=DataBase.book.size()-1;i++)
		{
			BookBean retrievedBook=DataBase.book.get(i);
			int retrievedBookId=retrievedBook.getId();
			idList.add(retrievedBookId);
		}
		return idList;

	}


	public LinkedList<BookBean> getBooksInfo() {
		return DataBase.book;
	}

	public boolean requestBook(int bid, String author) {
		for(BookBean bean : DataBase.book) {
			if(bean.getId()==bid && bean.getAuthor()==author) {
				return true;
			} else {
				return false;
			}
		}
		return false;
	}

	public boolean returnBook(int bid) {
		for(BookBean bean : DataBase.book) {
			if(bean.getId()==bid) {
				DataBase.book.add(bid, bean);
				return true;
			} else {
				return false;
			}
		}
		return false;
	}
	
}
